FORMAT: 1A
HOST: http://lifebelt.apiblueprint.org/

# lifebelt

Lifebelt is teachers's lifebelt to simplify
publish, share and review homeworks and exams. Also helps students,
giving them easy way to follow and be inform about new assignments, receiving
instant review where is possible.

# Group Courses

# Courses [/courses]

## Get all courses [GET]
+ Response 200 (application/json)

        [{
            "id": 123,
            "initials": "PO",
            "fullname": "Програмно осигуряване",
            "description": "Запознаване със структури от данни и езикът 'С'",
            "year": 2016
        },{
            "id": 124,
            "initials": "TP",
            "fullname": "Технология на Програмирането",
            "description": "Запознаване с технологията на и при програмирането",
            "year": 2016
        },{
            "id": 125,
            "initials": "OS",
            "fullname": "Операционни Системи",
            "description": "Описание за предмета 'Операционни Системи' ",
            "year": 2016
        }]

## Create a new course [POST]
+ Attributes (object)
    + initials: PO (required, string) - Course initials
    + fullname: Програмно осигуряване (required, string) - Fully qualified name
    + description: Some course description... (optional, string) - Long text with course description. Can be markdown formated or urls.
    + year: 2016 (required, number) - Course active year

+ Response 201 (application/json)

        {
            "id": 123,
            "initials": "PO",
            "fullname": "Програмно осигуряване",
            "description": "Запознаване със структури от данни и езикът 'С'",
            "year": 2016
        }

# Course [/courses/{course_id}]
+ Parameters
    + course_id: 42 (required, number) - Desired course id

## Get specific course by id [GET]
+ Response 200 (application/json)

        {
            "id": 123,
            "initials": "PO",
            "fullname": "Програмно осигуряване",
            "description": "Запознаване със структури от данни и езикът 'С'",
            "year": 2016
        }

## Edit existing course with given id [PUT]
+ Attributes
    + initials: PO (optional, string) - Course initials
    + fullname: Програмно осигуряване (optional, string) - Fully qualified name
    + description: Some course description... (optional, string) - Long text with course description. Can be markdown formated or urls.
    + year: 2016 (optional, number) - Course active year

+ Response 200 (application/json)

        {
            "id": 123,
            "initials": "PO",
            "fullname": "Програмно осигуряване",
            "description": "Запознаване със структури от данни и езикът 'С'",
            "year": 2016
        }

## Delete existing course by id [DELETE]
+ Response 204

# Group Course Assignments

# Assignments [/courses/{course_id}/assignments]
+ Parameters
    + course_id: 42 (required, number) - Desired course id

## Get all course assignments [GET]
+ Response 200 (application/json)

        [{
            "id": 123,
            "name": "Програмно осигуряване",
            "description": "Запознаване със структури от данни и езикът 'С'",
            "type": "exam",
            "start": "2012-04-23T18:25:43.511Z",
            "end": "2012-04-23T18:25:43.511Z"
        },{
            "id": 124,
            "name": "Програмно осигуряване",
            "description": "Запознаване със структури от данни и езикът 'С'",
            "type": "homework",
            "start": "2012-04-23T18:25:43.511Z",
            "end": "2012-04-23T18:25:43.511Z"
        },{
            "id": 125,
            "name": "Програмно осигуряване",
            "description": "Запознаване със структури от данни и езикът 'С'",
            "type": "exam",
            "start": "2012-04-23T18:25:43.511Z",
            "end": "2012-04-23T18:25:43.511Z"
        }]

## Create new course assignment [POST]
+ Attributes (object)
    + name: `Homework 1` (required, string) - Assignment name
    + description: `Short assignment description of assignemnt` (required, string)
    + type: `homework` (required, string) - Homework or exam
    + targets: `["A", "B", "ALL"]` (required, array[string]) - String list of targets
    + start: `2012-04-23T18:25:43.511Z` (required, string) - Timestamp
    + end: `2012-04-23T18:25:43.511Z` (required, string) - Timestamp

+ Response 201 (application/json)

        {
            "id": 123,
            "name": "Програмно осигуряване",
            "description": "Запознаване със структури от данни и езикът 'С'",
            "type": "homework",
            "targets": [
                "A",
                "B",
                "ALL"
            ],
            "start": "2012-04-23T18:25:43.511Z",
            "end": "2012-04-23T18:25:43.511Z"
        }

# Assignment [/courses/{course_id}/assignments/{ass_id}]
+ Parameters
    + course_id: 42 (required, number) - Desired course id
    + ass_id: 24 (required, number) - Assignment id you looking for

## Get specific course assignment by id [GET]
+ Response 200 (application/json)

        {
            "id": 123,
            "name": "Програмно осигуряване",
            "description": "Запознаване със структури от данни и езикът 'С'",
            "type": "homework",
            "targets": [
                "A",
                "B",
                "ALL"
            ],
            "start": "2012-04-23T18:25:43.511Z",
            "end": "2012-04-23T18:25:43.511Z"
        }

## Update existing course assignment [PUT]
+ Attributes
    + name: `Homework 1` (optional, string) - New assignment name
    + description: `New short assignment description of assignemnt` (optional, string)
    + type: `homework` (optional, string) - Change assignment type
    + targets: `["A", "B", "ALL"]` (optional, array[string]) - String list of targets
    + start: `2012-04-23T18:25:43.511Z` (optional, string) - Timestamp
    + end: `2012-04-23T18:25:43.511Z` (optional, string) - Timestamp

+ Response 200 (application/json)

        {
            "id": 123,
            "name": "Програмно осигуряване",
            "description": "Запознаване със структури от данни и езикът 'С'",
            "type": "homework",
            "targets": [
                "A",
                "B",
                "ALL"
            ],
            "start": "2012-04-23T18:25:43.511Z",
            "end": "2012-04-23T18:25:43.511Z"
        }

## Delete existing course assignment [DELETE]
+ Response 204


# Assignment submissions [/courses/{course_id}/assignments/{ass_id}/submissions]
+ Parameters
    + course_id: 42 (required, number) - Desired course id
    + ass_id: 24 (required, number) - Assignment id you looking for

## Get all submissions for assignment [GET]
+ Response 200 (application/json)

        [{
            {
            "id": 123,
            "author": 42,
            "date": "2012-04-23T18:25:43.511Z",
            "pullRequest": 1234,
            "grade": 100,
            "description": "Teache me master, how to create an pull request",
            "files" : [
                {
                    "id": 1,
                    "filename": "url to uploaded raw file",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                },
                {
                    "id": 2,
                    "filename": "url to uploaded raw file",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                }
            ]
        },{
            {
            "id": 123,
            "author": 42,
            "date": "2012-04-23T18:25:43.511Z",
            "pullRequest": 1234,
            "grade": 100,
            "description": "Teache me master, how to create an pull request",
            "files" : [
                {
                    "id": 1,
                    "filename": "url to uploaded raw file",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                },
                {
                    "id": 2,
                    "filename": "url to uploaded raw file",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                }
            ]
        },{
            {
            "id": 123,
            "author": 42,
            "date": "2012-04-23T18:25:43.511Z",
            "pullRequest": 1234,
            "grade": 100,
            "description": "Teache me master, how to create an pull request",
            "files" : [
                {
                    "id": 1,
                    "filename": "url to uploaded raw file",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                },
                {
                    "id": 2,
                    "filename": "url to uploaded raw file",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                }
            ]
        }]

## Create a new submission for this assignment [POST]
+ Attributes (object)
    + author: 42 (required, number) - Submission authors id
    + pullRequest: 1234 (optional, number) - For GitHub hook
    + grade: 100 (optional, number) - Submission grade, in POST maybe is unuseful
    + description: `Some note to the teacher` (optional, string)
    + files: `` (optional, array)

+ Response 201 (application/json)

        {
            "id": 123,
            "author": 42,
            "date": "2012-04-23T18:25:43.511Z",
            "pullRequest": 1234,
            "grade": 0,
            "description": "Teache me master, how to create an pull request",
            "files" : []
        }

# Assignment submission [/courses/{course_id}/assignments/{ass_id}/submissions/{sub_id}]
+ Parameters
    + course_id: 42 (required, number) - Desired course id
    + ass_id: 24 (required, number) - Assignment id you looking for
    + sub_id: 1 (required, number) - Submission id

## Get a specific assignment submission by id [GET]
+ Response 200 (application/json)

        {
            "id": 123,
            "author": 42,
            "date": "2012-04-23T18:25:43.511Z",
            "pullRequest": 1234,
            "grade": 100,
            "description": "Teache me master, how to create an pull request",
            "files" : [
                {
                    "id": 1,
                    "filename": "url to uploaded raw file",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                },
                {
                    "id": 2,
                    "filename": "url to uploaded raw file",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                }
            ]
        }

## Update submission grade or description [PUT]
+ Attributes
    + grade: 100 (optional, number) - Submission grade
    + description: `Update submission description` (optional, number)

+ Response 200 (application/json)

        {
            "id": 123,
            "author": 42,
            "date": "2012-04-23T18:25:43.511Z",
            "pullRequest": 1234,
            "grade": 100,
            "description": "Teache me master, how to create an pull request",
            "files" : [
                {
                    "id": 1,
                    "filename": "url to uploaded raw file",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                },
                {
                    "id": 2,
                    "filename": "url to uploaded raw file",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                }
            ]
        }

## Delete existing assignment submission [DELETE]
+ Response 204

# Submission status [/courses/{course_id}/assignments/{ass_id}/submissions/{sub_id}/status]
## Get submission status [GET]
+ Response 200 (application/json)

        {
            "id": 1,
            "status": "FINISHED|INPROGRESS|ERROR"
        }

# Submission files [/courses/{course_id}/assignments/{ass_id}/submissions/{sub_id}/files]
## Get all files [GET]
+ Response 200

## Attach new file [PUT]
+ Response 200

# Submission reviews [/courses/{course_id}/assignments/{ass_id}/submissions/{sub_id}/reviews]
+ Parameters
    + course_id: 42 (required, number) - Desired course id
    + ass_id: 24 (required, number) - Assignment id you looking for
    + sub_id: 1 (required, number) - Submission id

## Get all submission reviews [GET]
+ Response 200 (application/json)

        [{
            "id": 42,
            "author": 123,
            "description": "бот връща gcc status, учителя пише коментар",
            "points": 10,
            "date": "2012-04-23T18:25:43.511Z"
        },{
            "id": 42,
            "author": 124,
            "description": "бот връща gcc status, учителя пише коментар",
            "points": 10,
            "date": "2012-04-23T18:25:43.511Z"
        },{
            "id": 42,
            "author": 125,
            "description": "бот връща gcc status, учителя пише коментар",
            "points": 10,
            "date": "2012-04-23T18:25:43.511Z"
        }]

## Create a new submission review [POST]
+ Attributes (object)
    + author: 123 (required, number) - id of review author
    + description: `Some review description text goes here` (optional, string)
    + points: 100 (required, number) - points for submission from this review

+ Response 201 (application/json)

        {
            "id": 42,
            "author": 123,
            "description": "бот връща gcc status, учителя пише коментар",
            "points": 10,
            "date": "2012-04-23T18:25:43.511Z"
        }

# Submission review [/courses/{course_id}/assignments/{ass_id}/submissions/{sub_id}/reviews/{review_id}]
+ Parameters
    + course_id: 42 (required, number) - Desired course id
    + ass_id: 24 (required, number) - Assignment id you looking for
    + sub_id: 1 (required, number) - Submission id

## Get specific submission review [GET]
+ Response 200 (application/json)

        {
            "id": 42,
            "author": 123,
            "description": "бот връща gcc status, учителя пише коментар",
            "points": 10,
            "date": "2012-04-23T18:25:43.511Z"
        }

## Update existing submission review [PUT]
+ Attributes
    + description: "Updated review description" (optional, string)
    + points: 20 (optional, number) - Reviews points

+ Response 200

        {
            "id": 42,
            "author": 123,
            "description": "бот връща gcc status, учителя пише коментар",
            "points": 10,
            "date": "2012-04-23T18:25:43.511Z"
        }

## Delete existing submission review [DELETE]
+ Response 204

# Group Course announcements

# Announcements [/courses/{course_id}/announcements]
+ Parameters
    + course_id: 42 (required, number) - Desired course id

## Get all course announcements [GET]
+ Response 200

        [{
            "id": 12,
            "author": 32,
            "announce": "Announcement text",
            "date": "2012-04-23T18:25:43.511Z"
        },{
            "id": 12,
            "author": 32,
            "announce": "Announcement text",
            "date": "2012-04-23T18:25:43.511Z"
        },{
            "id": 12,
            "author": 32,
            "announce": "Announcement text",
            "date": "2012-04-23T18:25:43.511Z"
        }]

## Create a new course announcement [POST]
+ Attriutes
    + author: 42 (required, number) - Author's id
    + announcement: `announce text` (required, string)

+ Response 201

        {
            "id": 12,
            "author": 32,
            "announcement": "Announcement text",
            "date": "2012-04-23T18:25:43.511Z"
        }

# Announcement [/courses/{course_id}/announcements/{announce_id}]
+ Parameters
    + course_id: 42 (required, number) - Desired course id
    + announce_id: 24 (required, number) - Announcement you looking for

## Get specific course announcement [GET]
+ Response 200

        {
            "id": 12,
            "author": 32,
            "announcement": "Announcement text",
            "date": "2012-04-23T18:25:43.511Z"
        }

## Update existing course announcement [PUT]
+ Attriutes
    + author: 42 (required, number) - Author's id
    + announcement: `announce text` (required, string)

+ Response 200

        {
            "id": 12,
            "author": 32,
            "announcement": "Announcement text",
            "date": "2012-04-23T18:25:43.511Z"
        }

## Delete existing course announcement [DELETE]
+ Response 204

# Annoncement comments [/courses/{course_id}/announcements/{announce_id}/comments]
+ Parameters
    + course_id: 42 (required, number) - Desired course id
    + announce_id: 24 (required, number) - Announcement you looking for

## Get all announcement comments [GET]
+ Response 200

        [{
            "id": 1,
            "author": 42,
            "comment": "Comment itself",
            "date": "2012-04-23T18:25:43.511Z"
        },{
            "id": 1,
            "author": 42,
            "comment": "Comment itself",
            "date": "2012-04-23T18:25:43.511Z"
        },{
            "id": 1,
            "author": 42,
            "comment": "Comment itself",
            "date": "2012-04-23T18:25:43.511Z"
        }]

## Create new anouncement comment [POST]
+ Attriutes
    + author: 42 (required, number) - Author's id
    + comment: `comment text` (required, string)

+ Response 201

        {
            "id": 1,
            "author": 42,
            "comment": "Comment itself",
            "date": "2012-04-23T18:25:43.511Z"
        }

# Announcement comment [/courses/{course_id}/announcements/{announce_id}/comments/{comment_id}]
+ Parameters
    + course_id: 42 (required, number) - Desired course id
    + announce_id: 24 (required, number) - Announcement you looking for
    + comment_id: 44 (required, number) - Announcement comment by id

## Get specific comment [GET]
+ Response 200

        {
            "id": 1,
            "author": 42,
            "comment": "Comment itself",
            "date": "2012-04-23T18:25:43.511Z"
        }

## Update existing comment [PUT]
+ Attriutes
    + comment: `comment text` (required, string)

+ Response 200

        {
            "id": 1,
            "author": 42,
            "comment": "Comment itself",
            "date": "2012-04-23T18:25:43.511Z"
        }

## Delete existing comment [DELETE]
+ Response 204

# Group Course users

# Course users [/courses/{course_id}/users]
+ Parameters
    + course_id: 42 (required, number) - Desired course id

## Get all course users [GET]
+ Response 200 (application/json)

        [{
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        },{
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        },{
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        }]

## Add user to course [POST]
+ Attributes
    + role: `student` (required, string) - User role. Can be student or teacher
    + fullname: `Asen Lekov` (required, string)
    + github: `L3K0V` (required, string) - Github username for this user
    + email: `asenlekoff@gmail.com` (required, string) - User's email
    + details: `` (optional, object) - Student's details

+ Response 201

        {
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        }

# Course user [/courses/{course_id}/users/{user_id}]
+ Parameters
    + course_id: 42 (required, number) - Desired course id
    + user_id: 24 (required, number) - User you looking for

## Get course user [GET]
+ Response 200 (application/json)

        {
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        }

## Modify existing course user [PUT]
+ Attributes
    + fullname: `Asen Lekov` (optional, string)
    + github: `L3K0V` (optional, string) - Github username for this user
    + email: `asenlekoff@gmail.com` (optional, string) - User's email
    + details: `` (optional, object) - Student's details

+ Response 200 (application/json)

        {
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        }

## Delete existing course user [DELETE]
+ Response 204

# Group Users

# Users [/users]
## Get all users [GET]
+ Response 200 (aplication/json)

        [{
        "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        },{
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        },{
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        }]

## Create a new user [POST]
+ Attributes
    + role: `student` (required, string) - User role. Can be student or teacher
    + fullname: `Asen Lekov` (required, string)
    + github: `L3K0V` (required, string) - Github username for this user
    + email: `asenlekoff@gmail.com` (required, string) - User's email
    + details: `` (optional, object) - Student's details

+ Response 201 (application/json)

        {
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        }

# User [/users/{user_id}]
+ Parameters
    + user_id: 42 (required, number) - Desired user id

## Get specific user [GET]
+ Response 200 (application/json)

        {
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        }

## Edit specific user [PUT]
+ Response 200 (application/json)

        {
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal"
            "email": "asenlekoff@gmail.com",
            "avatar_url": "github url avatar"
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            }
        }

## Delete existing user [DELETE]
+ Response 204

# Group Authentication

# Login [/login]
## POST
+ Response 201 (appication/json)

        {
            "id": 123,
            "role": "student|teacher"
            "fullname": "Asen Lekov",
            "github": "L3K0V",
            "github_token": "blablalbaslskkal",
            "email": "asenlekoff@gmail.com",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1440422",
            "details" : {
                "grade": 10,
                "class": "A",
                "number": 5
            },
            "token": "our litte secret here"
        }

# Logout [/logout]
## POST
+ Response 204
